apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'org.jetbrains.kotlin.jvm'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

pluginBundle {
    website = POM_URL
    vcsUrl = 'https://github.com/yshrsmz/BuildKonfig.git'
    description = POM_DESCRIPTION
    tags = ['BuildConfig', 'Kotlin', 'Kotlin Multiplatform']

    plugins {
        kgql {
            displayName = POM_NAME
        }
    }
}

gradlePlugin {
    plugins {
        kgql {
            id = "com.codingfeline.buildkonfig"
            implementationClass = "com.codingfeline.buildkonfig.gradle.BuildKonfigPlugin"
        }
    }
}

configurations {
    fixtureClasspath
}

// Append any extra dependencies to the test fixtures via a custom configuration classpath. This
// allows us to apply additional plugins in a fixture while still leveraging dependency resolution
// and de-duplication semantics.
//tasks.getByName('pluginUnderTestMetadata').
//        getPluginClasspath().
//        from(configurations.fixtureClasspath)
tasks.getByName('pluginUnderTestMetadata')
        .setPluginClasspath(
        tasks.getByName('pluginUnderTestMetadata')
                .getPluginClasspath().plus(configurations.fixtureClasspath)
)

dependencies {
    implementation project(':buildkonfig-compiler')
//    implementation deps.kotlin.stdlib.jdk8

    compileOnly gradleApi()
    implementation localGroovy()
    implementation deps.plugins.kotlin

    testImplementation deps.kotlin.stdlib.jdk8
    testImplementation deps.junit
    testImplementation deps.truth

    fixtureClasspath deps.plugins.kotlin
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
